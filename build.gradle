import groovy.xml.MarkupBuilder
import groovy.xml.XmlSlurper

buildscript {

	repositories {
		google()
		mavenCentral()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:7.1.1'
		classpath 'org.codehaus.groovy:groovy-xml:3.0.9'
	}
}

apply {
	plugin 'com.android.application'
}

allprojects {

	repositories {
		google()
		mavenCentral()
	}
}

def addonId = 'plugin.video.elementum'
def addonAssetsDir = ".kodi/addons/$addonId"
def remotePort = 65221
def localHost = '127.0.0.1'
def localPort = 65220

def srcGen = "$buildDir.path/src"
def srcMainGen = "$srcGen/main"
def srcMainAssetsGen = "$srcMainGen/assets"
def srcMainJniLibsGen = "$srcMainGen/jniLibs"

android {
	compileSdkVersion 31

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}

	defaultConfig {
		minSdkVersion 26
		targetSdkVersion 31
		versionCode System.getProperty('versionCode') as Integer ?: 20
		versionName System.getProperty('versionName') ?: "$versionCode"
		applicationId 'service.elementum.android'
		manifestPlaceholders = [
				'mainIntentAction': 'android.intent.action.MAIN'
		]
		buildConfigField 'java.util.Map<String, String>', 'SUBPROCESS_ASSETS', """
				|java.util.Collections.unmodifiableMap(new java.util.HashMap<>() {{
				|  put(\"$addonId\", \"%2\$s/$addonAssetsDir\");
				|}})""".stripMargin()
		buildConfigField 'java.util.List<String>', 'SUBPROCESS_CMD', """
				|java.util.Collections.unmodifiableList(java.util.Arrays.asList(
				|    \"./libelementum.so\",
				|    \"-remotePort=$remotePort\",
				|    \"-localHost=$localHost\",
				|    \"-localPort=$localPort\"
				|))""".stripMargin()
		buildConfigField 'java.util.Map<String, String>', 'SUBPROCESS_ENV', """
				|java.util.Collections.unmodifiableMap(new java.util.HashMap<>() {{
				|  put(\"LD_LIBRARY_PATH\", \"%1\$s\");
				|}})""".stripMargin()
		buildConfigField 'java.util.Set<Integer>', 'SUBPROCESS_EXIT_VALUES_END', """
				|java.util.Collections.unmodifiableSet(new java.util.HashSet<>(java.util.Arrays.asList(
				|    -9,
				|    1
				|)))""".stripMargin()
		buildConfigField 'java.util.Set<Integer>', 'SUBPROCESS_EXIT_VALUES_SKIP', """
				|java.util.Collections.unmodifiableSet(new java.util.HashSet<>(java.util.Arrays.asList(
				|    -1,
				|    0
				|)))""".stripMargin()
		buildConfigField 'java.util.Set<Integer>', 'SUBPROCESS_EXIT_VALUES_START', """
				|java.util.Collections.unmodifiableSet(new java.util.HashSet<>(java.util.Arrays.asList(
				|    5
				|)))""".stripMargin()
		buildConfigField 'int', 'SUBPROCESS_RETRIES_COUNT', '3'
		buildConfigField 'long', 'SUBPROCESS_RETRY_DELAY', '5_000L'
		buildConfigField 'String', 'SUBPROCESS_TAG', "\"$addonId\""
	}

	applicationVariants.all { variant ->
		variant.outputs.each {
			def fileName = it.outputFileName
			def name = fileName - ~/\.[^.]+$/
			it.outputFileName = "$name-${variant.versionName}${fileName.substring(name.length())}"
		}
	}

	signingConfigs {

		debug {
			storeFile file('debug.keystore')
			storePassword 'android'
			keyAlias 'androiddebugkey'
			keyPassword 'android'
		}
	}

	buildTypes {

		debug {
			manifestPlaceholders = [
					'mainIntentCategory': 'android.intent.category.LAUNCHER'
			]
		}

		release {
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
			signingConfig signingConfigs.debug
			manifestPlaceholders = [
					'mainIntentCategory': 'android.intent.category.DEFAULT'
			]
		}
	}

	sourceSets {

		main {

			assets {
				srcDir srcMainAssetsGen
			}

			jniLibs {
				srcDir srcMainJniLibsGen
			}
		}
	}

	splits {

		abi {
			enable true
			universalApk true
		}
	}

	packagingOptions {

		jniLibs {
			useLegacyPackaging true
		}
	}
}

def addonZip = System.getProperty('addonZip')
if (addonZip != null) {
	def addonDir = "$buildDir.path/${file(addonZip).name - ~/\.[^.]+$/}"
	def addonIdDir = "$addonDir/$addonId"
	def repoAddonName = 'Elementum Repository'
	def repoAddonId = 'repository.elementum'
	def repoAddonIdDir = "$addonIdDir/$repoAddonId"
	def repoAddonDataDir = "http://$localHost:$localPort/repository/elgatito/"
	def repoAddonInfo = "${repoAddonDataDir}plugin.video.elementum/addons.xml"

	task patchAddon() {

		doFirst {
			delete addonDir
		}

		doLast {
			def applicationId = android.defaultConfig.applicationId
			def mainIntentAction = android.defaultConfig.manifestPlaceholders['mainIntentAction']
			def startArgs = "$applicationId, $mainIntentAction"
			def pathPattern = '/org\\.xbmc\\.kodi/'
			def pathReplace = "/$applicationId/"
			def startLine = '                proc = start_elementumd(stdout=subprocess.PIPE, stderr=subprocess.STDOUT)'
			def startLinePatched = """                srcRepoDir = os.path.join(ADDON_PATH, '$repoAddonId')
					|                dstRepoDir = os.path.join(ADDON_PATH, '..', '$repoAddonId')
					|                srcRepoAddon = os.path.join(srcRepoDir, 'addon.xml')
					|                dstRepoAddon = os.path.join(dstRepoDir, 'addon.xml')
					|                if os.path.isfile(srcRepoAddon):
					|                    isRepoAddonEqual = False
					|                    try:
					|                        isRepoAddonEqual = filecmp.cmp(srcRepoAddon, dstRepoAddon, shallow=False)
					|                    except Exception:
					|                        pass
					|                    if not isRepoAddonEqual:
					|                        try:
					|                            os.makedirs(dstRepoDir)
					|                        except Exception:
					|                            pass
					|                        try:
					|                            shutil.rmtree(dstRepoDir)
					|                        except Exception:
					|                            pass
					|                        try:
					|                            shutil.copytree(srcRepoDir, dstRepoDir)
					|                        except Exception:
					|                            pass
					|                xbmc.executebuiltin('StartAndroidActivity($startArgs)')""".stripMargin()
			def pathLine = "        info['path'] = ADDON_PATH"
			def pathLinePatched = """        pathPattern = '$pathPattern'
					|        pathReplace = '$pathReplace'
					|        info['path'] = re.sub(pathPattern, pathReplace, ADDON_PATH, 1)
					|        info['fanart'] = re.sub(pathPattern, pathReplace, info['fanart'], 1)
					|        info['icon'] = re.sub(pathPattern, pathReplace, info['icon'], 1)""".stripMargin()
			def translateLine = '        return translatePath(*args, **kwargs)'
			def translateLinePatched = """        pathPattern = '$pathPattern'
					|        pathReplace = '$pathReplace'
					|        result = translatePath(*args, **kwargs)
					|        return re.sub(pathPattern, pathReplace, result, 1)""".stripMargin()
			def patches = [
					(file("$addonIdDir/resources/site-packages/elementum/daemon.py")): [
							[startLine, startLinePatched]
					],
					(file("$addonIdDir/resources/site-packages/elementum/rpc.py"))   : [
							[pathLine, pathLinePatched],
							[translateLine, translateLinePatched]
					]
			]
			def renames = new HashSet<>(patches.keySet())
			copy {
				from zipTree(addonZip)
				into addonDir
				rename { renames.removeIf { f -> f.name == it } ? "${it}.tmp" : it }
			}
			if (!renames.isEmpty()) {
				def missing = renames.collect { "$it.path\n" }
				throw new GradleException("missing:\n$missing")
			}
			patches.forEach { f, patch ->
				def tmp = file("${f.parent}/${f.name}.tmp")
				copy {
					from f.parent
					into f.parent
					include tmp.name
					rename { f.name }
					filter {
						def pair = patch.find { pair -> pair[0] == it }
						patch.remove(pair) ? pair[1] : it
					}
				}
				if (!patch.isEmpty()) {
					def missing = patch.collect { it.join '\n\n' } join '\n\n\n\n'
					throw new GradleException("${f.path} missing:\n$missing")
				}
				delete tmp
			}

			copy {
				from addonIdDir
				into repoAddonIdDir
				include 'fanart.png', 'icon.png'
			}
			def addon = new XmlSlurper().parse(file("$addonIdDir/addon.xml"))
			try (def writer = new FileWriter(file("$repoAddonIdDir/addon.xml"))) {
				new MarkupBuilder(writer).addon(
						'name': repoAddonName,
						'id': repoAddonId,
						'provider-name': addon.@'provider-name',
						'version': addon.@'version') {

					extension('name': repoAddonName, 'point': 'xbmc.addon.repository') {

						checksum("${repoAddonInfo}.md5")

						datadir('zip': 'true', repoAddonDataDir)

						info('compressed': 'false', repoAddonInfo)
					}

					extension('point': 'xbmc.addon.metadata') {

						platform('all')

						summary('lang': 'en', 'GitHub repository for Elementum updates')
					}

					requires {}
				}
			}
		}
	}

	task genMainAssets(dependsOn: [patchAddon]) {

		doFirst {
			delete srcMainAssetsGen
		}

		doLast {

			copy {
				from addonDir
				into srcMainAssetsGen
				exclude '**/.*', "$addonId/resources/bin", "$addonId/$repoAddonId"
			}
		}
	}

	task genMainJniLibs(dependsOn: [patchAddon]) {

		doFirst {
			delete srcMainJniLibsGen
		}

		doLast {
			[
					'arm64-v8a'  : 'android_arm64',
					'armeabi-v7a': 'android_arm',
					'x86'        : 'android_x86',
					'x86_64'     : 'android_x64'
			].forEach { abi, bin ->
				copy {
					from "$addonIdDir/resources/bin/$bin"
					into "$srcMainJniLibsGen/$abi"
					rename { it ==~ /^lib.*\.so$/ ? it : "lib${it}.so" }
				}
			}
		}
	}

	tasks.withType(JavaCompile) {
		it.dependsOn genMainAssets
		it.dependsOn genMainJniLibs
	}

	task zipAndroidClient(type: Zip, dependsOn: [patchAddon]) {
		from addonDir
		destinationDirectory = file(addonDir).parentFile
		archiveFileName = "${file(addonDir).name}.android_client.zip"
		exclude '**/.*', "$addonId/resources/bin"

		doFirst {
			delete "${addonDir}.android_client.zip"
		}
	}
}
